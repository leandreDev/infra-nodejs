
import {UtilsSecu , CtxInterpretor , IHttpResult , HttpAbstractService , MiddleWareConfig} from "@hfdev/utils" ;

import * as Interface from '../../lib/modelObj/Interfaces' ;
import * as querystring from 'querystring' ;

/**
<%=datas.description%>
*/
export class <%=datas.name%> extends HttpAbstractService {

  /**
<%=datas.description%>
*/
  constructor(
     conf:any 

  ) {
   super(conf) ;
   this.url = conf.url ;

  }

  protected url:string ;

  <%_.forEach(datas.paths , function(path){%>
  <%if(path.verbe == 'get'){%> 
  public <%=path.name%><T extends <%=idInterface[path.returnType] %> >( <% _.forEach(path.pathParams , function(param){ %><%=param.name%><%if(!param.require){%>?<%}%>:<%=idInterface[param.type]%> , <%})%>  headers:any= {} ): Promise<IHttpResult<T>> {
    return this.baseGet<T>( `<%="${this.url}"%><%=path.path%>`   , headers)
  }
  <%}%>
  
  <%if(path.verbe == 'delete'){%> 
  public <%=path.name%><T extends <%=idInterface[path.returnType] %> >( <% _.forEach(path.pathParams , function(param){ %><%=param.name%><%if(!param.require){%>?<%}%>:<%=idInterface[param.type]%> , <%})%>  headers:any= {} ): Promise<IHttpResult<T>> {
    return this.baseDelete<T>( `<%="${this.url}"%><%=path.path%>`   , headers)
  }
  <%}%>
  <%if(path.verbe == 'post'){%> 
  public <%=path.name%><T extends <%=idInterface[path.returnType] %> , U extends <%=idInterface[path.bodyParam] %> >(body:U  , <% _.forEach(path.pathParams , function(param){ %><%=param.name%><%if(!param.require){%>?<%}%>:<%=idInterface[param.type]%> , <%})%>  headers:any= {} ): Promise<IHttpResult<T>> {
    return this.basePost<T, U>( `<%="${this.url}"%><%=path.path%>`  , body , headers)
  }
  <%}%>
  <%if(path.verbe == 'put'){%> 
  public <%=path.name%><T extends <%=idInterface[path.returnType] %> , U extends <%=idInterface[path.bodyParam] %> >(body:U  , <% _.forEach(path.pathParams , function(param){ %><%=param.name%><%if(!param.require){%>?<%}%>:<%=idInterface[param.type]%> , <%})%>  headers:any= {} ): Promise<IHttpResult<T>> {
    
    return this.basePut<T, U>( `<%="${this.url}"%><%=path.path%>`  , body , headers)
  }
  <%}%>
  <%if(path.verbe == 'patch'){%> 
  public <%=path.name%><T extends <%=idInterface[path.returnType] %> , U extends <%=idInterface[path.bodyParam] %> >(body:U  , <% _.forEach(path.pathParams , function(param){ %><%=param.name%><%if(!param.require){%>?<%}%>:<%=idInterface[param.type]%> , <%})%>  headers:any= {} ): Promise<IHttpResult<T>> {
    
    return this.basePatch<T>( `<%="${this.url}"%><%=path.path%>`  , body , headers)
  }
  <%}%>

  <%});%>


}

